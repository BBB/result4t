"use strict";(self.webpackChunkresult_4_t=self.webpackChunkresult_4_t||[]).push([[671],{5797:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var s=t(1527),r=t(1683);const i={id:"intro",title:"Quick setup guide",tags:["Guide","First launch","Getting started"],sidebar_position:1},a=void 0,o={id:"intro",title:"Quick setup guide",description:"Installation",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/result4t/docs/intro",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/intro.md",tags:[{label:"Guide",permalink:"/result4t/docs/tags/guide"},{label:"First launch",permalink:"/result4t/docs/tags/first-launch"},{label:"Getting started",permalink:"/result4t/docs/tags/getting-started"}],version:"current",sidebarPosition:1,frontMatter:{id:"intro",title:"Quick setup guide",tags:["Guide","First launch","Getting started"],sidebar_position:1},sidebar:"tutorialSidebar"},l={},u=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Execution",id:"execution",level:3},{value:"The Goal",id:"the-goal",level:3},{value:"Taking it further",id:"taking-it-further",level:3}];function c(e){const n={code:"code",em:"em",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsxs)(n.p,{children:["The package is available at ",(0,s.jsx)(n.code,{children:"result4t"})," and ",(0,s.jsx)(n.code,{children:"@ollierelph/result4t"})," install from whichever you see fit using your\npreferred too."]}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsxs)(n.p,{children:["The most common use case is to wrap unsafe promise calls and make them ",(0,s.jsx)(n.em,{children:"safe"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'\nimport {TaskResult} from "result4t";\n\nclass ReadFileIssue {\n}\n\ntype Path = string\n\nconst readFile = (path: Path) => TaskResult.fromPromise(() => {\n  return fs.readFile(path)\n}, (err: unknown) => new ReadFileIssue())\n\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Calling readfile will return a ",(0,s.jsx)(n.code,{children:"TaskResult<Buffer, ReadFileIssue>"}),", this is a computation that will give you either a\nBuffer, or a ReadFileIssue depending on the state of the disk."]}),"\n",(0,s.jsx)(n.h3,{id:"execution",children:"Execution"}),"\n",(0,s.jsxs)(n.p,{children:["In order execute this computation, you will need to call ",(0,s.jsx)(n.code,{children:".run()"})," on the value."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'const result: Result<Buffer, ReadFileIssue> = await readFile("/tmp/foo.txt").run()\n'})}),"\n",(0,s.jsxs)(n.p,{children:["or you can call ",(0,s.jsx)(n.code,{children:".runThrowFailure()"})," to minic the behaviour of a promise - you lose the failure typing though"]}),"\n",(0,s.jsx)(n.h3,{id:"the-goal",children:"The Goal"}),"\n",(0,s.jsxs)(n.p,{children:["The goal when building your application should be only to have a single ",(0,s.jsx)(n.code,{children:".run()"})," at the top of the stack, the rest of your application should happen within a Task chain:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import {TaskResult} from "result4t";\nimport fs from "fs/promises";\n\n\nclass ReadFileIssue {\n  type = "ReadFileIssue" as const;\n\n  constructor(public path: string) {\n  }\n}\n\ntype Path = string\n\nconst readFile = (path: Path) => TaskResult.fromPromise(() => {\n  // function that returns a Promise<T> and throws and unknown\n  return fs.readFile(path)\n}, (err: unknown) => new ReadFileIssue(path))\n\nreadFile("/tmp/foo.txt")\n  .map((content: Buffer) => content.toString("utf-8"))\n  .peek((text: string) => {\n    // print the text to the screen\n  })\n  .peekFailure((reason: ReadFileIssue) => {\n    // report the issue\n  }).run()\n  .catch(err => {\n      // undexpected error\n  })\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"map"})," and ",(0,s.jsx)(n.code,{children:"mapFailure"})," can be used to transform (map from one value to another) the success anf failure cases"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"peek"})," and ",(0,s.jsx)(n.code,{children:"peekFailure"})," can be used for side-effects at the boundary of a program."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"flatMap"})," and ",(0,s.jsx)(n.code,{children:"flatMapFailure"})," can be used to join 2 ",(0,s.jsx)(n.code,{children:"TaskResult"})," together:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import {TaskResult} from "result4t";\nimport fs from "fs/promises";\n\nclass MyApplicationIssue {\n  constructor(public inner: ReadFileIssue | WriteFileIssue) {\n  }\n}\n\nclass ReadFileIssue {\n  type = "ReadFileIssue" as const;\n\n  constructor(public path: string) {\n  }\n}\n\nclass WriteFileIssue {\n  type = "WriteFileIssue" as const;\n\n\n  constructor(public path: string) {\n  }\n}\n\ntype Path = string;\n\nconst readFile = (path: Path) =>\n  TaskResult.fromPromise(\n    () => {\n      // function that returns a Promise<T> and throws and unknown\n      return fs.readFile(path);\n    },\n    (err: unknown) => new ReadFileIssue(path),\n  );\n\nconst writeFile = (path: Path, content: string) =>\n  TaskResult.fromPromise(\n    () => {\n      // function that returns a Promise<T> and throws and unknown\n      return fs.writeFile(path, content);\n    },\n    (err: unknown) => new WriteFileIssue(path),\n  );\n\nreadFile("/tmp/foo.txt")\n  .mapFailure((err) => new MyApplicationIssue(err))\n  .map((content: Buffer) => content.toString("utf-8"))\n\n  .flatMap((text: string) =>\n    writeFile("/tmp/foo2.txt", text).mapFailure(\n      (err) => new MyApplicationIssue(err),\n    ),\n  )\n  .peekFailure((reason) => {\n    // report the issue\n  })\n  .run()\n  .catch((err) => {\n    // unexpected error\n  });\n\n'})}),"\n",(0,s.jsx)(n.h3,{id:"taking-it-further",children:"Taking it further"}),"\n",(0,s.jsxs)(n.p,{children:["The aim with these ",(0,s.jsx)(n.code,{children:"TaskResult.fromPromise"})," calls is to then describe all the errors you need to handle in your domain with specific types:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import {TaskResult} from "result4t";\nimport fs from "fs/promises";\n\nclass ReadFileIssue {\n  type = "ReadFileIssue" as const;\n\n  constructor(public path: string) {\n  }\n}\nclass FileNotFound {\n  type = "FileNotFound" as const;\n\n  constructor(public path: string) {\n  }\n}\n\nconst isError = (it: unknown): it is Error => it instanceof Error\n\nconst readFile = (path: Path) =>\n  TaskResult.fromPromise(\n    () => {\n      // function that returns a Promise<T> and throws and unknown\n      return fs.readFile(path);\n    },\n    (err: unknown) => isError(err) && err.message.includes("ENOENT: no such file or directory") ? new FileNotFound(path) : new ReadFileIssue(path),\n  );\n'})}),"\n",(0,s.jsx)(n.p,{children:"Now you can handle those specific cases correctly:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'const result: TaskResult<Buffer, ReadFileIssue> = readFile("/tmp/foo.txt")\n.flatMapFailure((err) => {\n    if (err instanceof FileNotFound) {\n        return TaskResult.success(Buffer.from(""))\n    }\n    return TaskResult.failure(err)\n})\n'})})]})}function d(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},1683:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>a});var s=t(959);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);